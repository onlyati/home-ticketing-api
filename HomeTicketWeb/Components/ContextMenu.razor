<!------------------------------------------------------------------------------------------------>
<!-- ConextMenu.razor                                                                           -->
<!--                                                                                            -->
<!-- It is a conext menu (right click menu). Input parameters:                                  -->
<!-- - ChildContent: fragement should contain every data in the body of context menu            -->
<!-- - PosXFromLeft: this component is fixed position, this parameter tells positon from left   -->
<!-- - PosYFromBottom: this component is fixed position, parameter tells positon from bottom    -->
<!-- - Title: it is showed at the top of the conext menu                                        -->
<!--                                                                                            -->
<!------------------------------------------------------------------------------------------------>

@if (IsVisible)
{
    <div class="ati-contextmenu-box" style="left: @(PosXFromLeft)px; bottom: @(PosYFromBottom)px;">
        <div class="row ati-contextmenu-title m-0">
            <div class="col justify-content-center">
                <h5>@Title</h5>
            </div>
            <div class="col-auto">
                <button type="button" class="close" aria-label="Close" @onclick="@Hide">
                    <img src="img/close-icon.png" height="25" width="25" />
                </button>
            </div>
        </div>
        @ChildContent
    </div>
}

@code {
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public int PosXFromLeft { get; set; }
    [Parameter] public int PosYFromBottom { get; set; } = 55;
    [Parameter] public string Title { get; set; }

    [CascadingParameter] public TaskBarMenuItem MenuItem { get; set; }

    private bool IsVisible = false;

    public void Show()
    {
        IsVisible = true;
        StateHasChanged();
    }

    public void Hide()
    {
        IsVisible = false;
        StateHasChanged();
    }

    public void Refresh()
    {
        StateHasChanged();
    }
}
